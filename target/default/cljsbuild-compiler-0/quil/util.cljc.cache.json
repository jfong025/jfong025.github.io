["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$p5",["^ ","~$prototype",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$quil.util","~:imports",null,"~:requires",["^ ","~$cstr","~$clojure.string","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$clj-compilation?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","~:line",88,"~:column",7,"~:end-line",88,"~:end-column",23,"~:arglists",["~#list",["~$quote",["^K",[[]]]]]],"^9","~$quil.util/clj-compilation?","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",23,"~:method-params",["^K",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",88,"~:ret-tag","~$boolean","^H",88,"~:max-fixed-arity",0,"~:fn-var",true,"^J",["^K",["^L",["^K",[[]]]]]],"~$make-quil-constant-map",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",114,"^G",7,"^H",114,"^I",29,"^J",["^K",["^L",["^K",[["~$target","~$const-map-name","~$const-map"]]]]]],"^9","~$quil.util/make-quil-constant-map","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",29,"^N",["^K",[["^W","^X","^Y"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",114,"^R","~$any","^H",114,"^T",3,"^U",true,"^J",["^K",["^L",["^K",[["^W","^X","^Y"]]]]]],"~$clj-unchecked-int",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",127,"^G",7,"^H",127,"^I",24,"^J",["^K",["^L",["^K",[["~$v"]]]]],"~:doc","In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"^9","~$quil.util/clj-unchecked-int","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",24,"^N",["^K",[["~$v"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",127,"^H",127,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$v"]]]]],"^11","In clojure it does `unchecked-int` and does nothing in cljs.\n  Needed to handle colors in hex form in clojure."],"~$initial-internal-state",["^ ","^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",9,"^G",6,"^H",9,"^I",28],"^9","~$quil.util/initial-internal-state","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",28,"^G",1,"^F",9,"^H",9,"~:tag","~$cljs.core/IMap","^11","Internal state map used to initiate all sketches."],"~$print-definition-list",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",77,"^G",7,"^H",77,"^I",28,"^J",["^K",["^L",["^K",[["~$definitions"]]]]]],"^9","~$quil.util/print-definition-list","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",28,"^N",["^K",[["^18"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",77,"^R","^[","^H",77,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^18"]]]]]],"~$generate-quil-constants",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",121,"^G",11,"^H",121,"^I",34,"~:macro",true,"^J",["^K",["^L",["^K",[["^W","~$&","~$opts"]]]]],"~:top-fn",["^ ","^Q",true,"^T",1,"^N",["^K",[["^K",["^W","^1<"]]]],"^J",["^K",[["^W","~$&","^1<"]]],"^P",["^K",[null]]]],"^9","~$quil.util/generate-quil-constants","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",34,"^1=",["^ ","^Q",true,"^T",1,"^N",["^K",[["^K",["^W","^1<"]]]],"^J",["^K",[["^W","~$&","^1<"]]],"^P",["^K",[null]]],"^N",["^K",[["^K",["^W","^1<"]]]],"^O",null,"^P",["^K",[null]],"^G",1,"^Q",true,"^F",121,"^1;",true,"^R","^[","^H",121,"^T",1,"^U",false,"^J",["^K",[["^W","~$&","^1<"]]]],"~$resolve-constant-key",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",32,"^G",7,"^H",32,"^I",27,"^J",["^K",["^L",["^K",[["~$key","~$mappings"]]]]],"^11","Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception."],"^9","~$quil.util/resolve-constant-key","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",27,"^N",["^K",[["^1@","^1A"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",32,"^R",["^8",[null,"^["]],"^H",32,"^T",2,"^U",true,"^J",["^K",["^L",["^K",[["^1@","^1A"]]]]],"^11","Returns the val associated with `key` in `mappings` or `key` directly if it\n  is one of the vals in `mappings`. Otherwise throws an exception."],"~$no-fn",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",5,"^G",7,"^H",5,"^I",12,"^J",["^K",["^L",["^K",[[]]]]],"^11","Function that does nothing."],"^9","~$quil.util/no-fn","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",12,"^N",["^K",[[]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",5,"^R","~$clj-nil","^H",5,"^T",0,"^U",true,"^J",["^K",["^L",["^K",[[]]]]],"^11","Function that does nothing."],"~$prepare-quil-clj-constants",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",102,"^G",7,"^H",102,"^I",33,"^J",["^K",["^L",["^K",[["~$constants"]]]]]],"^9","~$quil.util/prepare-quil-clj-constants","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",33,"^N",["^K",[["^1G"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",102,"^R","^[","^H",102,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1G"]]]]]],"~$prepare-quil-cljs-constants",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",108,"^G",7,"^H",108,"^I",34,"^J",["^K",["^L",["^K",[["^1G"]]]]]],"^9","~$quil.util/prepare-quil-cljs-constants","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",34,"^N",["^K",[["^1G"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",108,"^R","^[","^H",108,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1G"]]]]]],"~$length-of-longest-key",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",44,"^G",8,"^H",44,"^I",29,"~:private",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^11","Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```"],"^1L",true,"^9","~$quil.util/length-of-longest-key","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",29,"^N",["^K",[["~$m"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",44,"^R",["^8",["^[","~$number","^1E"]],"^H",44,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["~$m"]]]]],"^11","Returns the length of the longest key of map `m`. Assumes `m`'s keys are strings\n   and returns 0 if map is empty:\n\n   Examples:\n   ```\n   (length-of-longest-key {\"foo\" 1 \"barr\" 2 \"bazzz\" 3}) ;=> 5\n   (length-of-longest-key {}) ;=> 0\n   ```"],"~$gen-padding",["^ ","^C",null,"^D",["^ ","^1L",true,"^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^I",19,"^1=",["^ ","^Q",false,"^T",3,"^N",["^K",[["~$len"],["^1P","~$pad"],["~$s","^1P","^1Q"]]],"^J",["^K",[["^1P"],["^1P","^1Q"],["~$s","^1P","^1Q"]]],"^P",["^K",[null,null,null]]],"^G",8,"^F",57,"^H",57,"^J",["^K",["^L",["^K",[["^1P"],["^1P","^1Q"],["~$s","^1P","^1Q"]]]]],"^11","Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n   (gen-padding 3 \"b\")          ;=> \"bbb\"\n   (gen-padding 3)                ;=> \"   \"\n   ```\n   "],"^1L",true,"^9","~$quil.util/gen-padding","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",19,"^1=",["^ ","^Q",false,"^T",3,"^N",["^K",[["^1P"],["^1P","^1Q"],["~$s","^1P","^1Q"]]],"^J",["^K",[["^1P"],["^1P","^1Q"],["~$s","^1P","^1Q"]]],"^P",["^K",[null,null,null]]],"^N",["^K",[["^1P"],["^1P","^1Q"],["~$s","^1P","^1Q"]]],"^O",null,"^P",["^K",[null,null,null]],"^G",1,"^Q",false,"^F",57,"^H",57,"^T",3,"^U",true,"^J",["^K",[["^1P"],["^1P","^1Q"],["~$s","^1P","^1Q"]]],"^11","Generates a padding string with `s` concatenated with `len` times `pad`.\n   May be called without starting string `s` in which case it defaults to the\n   empty string and also without `pad` in which case it defaults to a single\n   space.\n\n   Examples:\n   ```\n   (gen-padding \"asdf\" 5 \"b\") ;=> \"asdfbbbbb\"\n   (gen-padding 3 \"b\")          ;=> \"bbb\"\n   (gen-padding 3)                ;=> \"   \"\n   ```\n   "],"~$prepare-quil-name",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/target/default/cljsbuild-compiler-0/quil/util.cljc","^F",97,"^G",7,"^H",97,"^I",24,"^J",["^K",["^L",["^K",[["~$const-keyword"]]]]]],"^9","~$quil.util/prepare-quil-name","^E","target/default/cljsbuild-compiler-0/quil/util.cljc","^I",24,"^N",["^K",[["^1T"]]],"^O",null,"^P",["^K",[null,null]],"^G",1,"^Q",false,"^F",97,"^R","^[","^H",97,"^T",1,"^U",true,"^J",["^K",["^L",["^K",[["^1T"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:frame-rate","~:else","~$do","~:looping?","~$js/p5.prototype","~:clj","~$cljs.core/aget","~$def"]],"~:order",["^1Z","^21","^1[","^24","^22","^25","^23","^20"]],"^11","Utility fns"]