["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$pucks.neighbors","~:imports",null,"~:requires",["^ ","~$globals","~$pucks.globals","^:","^:","~$vec2D","~$pucks.vec2D","^<","^<","~$util","~$pucks.util","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$strip-embedded-agents",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/jfong/pucks/src/pucks/neighbors.cljc","~:line",8,"~:column",7,"~:end-line",8,"~:end-column",28,"~:arglists",["~#list",["~$quote",["^K",[["~$a"]]]]],"~:doc","Strips the embedded agents, which might be in the values of :neighbors, \n:sensed, and :overlaps, from agent a. This prevents the accumulation of long\nor infinite chains of recursive agent references and also prevents agents\nfrom inappropriately learning about agents that they have not sensed directly."],"^5","~$pucks.neighbors/strip-embedded-agents","^E","src/pucks/neighbors.cljc","^I",28,"~:method-params",["^K",[["~$a"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",8,"~:ret-tag","~$any","^H",8,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["~$a"]]]]],"^M","Strips the embedded agents, which might be in the values of :neighbors, \n:sensed, and :overlaps, from agent a. This prevents the accumulation of long\nor infinite chains of recursive agent references and also prevents agents\nfrom inappropriately learning about agents that they have not sensed directly."],"~$neighborhood-grid",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/src/pucks/neighbors.cljc","^F",19,"^G",7,"^H",19,"^I",24,"^J",["^K",["^L",["^K",[["~$agents"]]]]],"^M","Returns a neighborhood grid containing all agents."],"^5","~$pucks.neighbors/neighborhood-grid","^E","src/pucks/neighbors.cljc","^I",24,"^O",["^K",[["^X"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",19,"^S",["^4",["~$clj","~$cljs.core/IVector","^T","~$cljs.core/MetaFn","~$clj-nil"]],"^H",19,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^X"]]]]],"^M","Returns a neighborhood grid containing all agents."],"~$get-neighboring-grid-spaces",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/src/pucks/neighbors.cljc","^F",35,"^G",7,"^H",35,"^I",34,"^J",["^K",["^L",["^K",[["~$grid-size",["~$x","~$y"]]]]]],"^M","Returns a vector of the indices for the neighborhood grid where neighbors\ncould be found."],"^5","~$pucks.neighbors/get-neighboring-grid-spaces","^E","src/pucks/neighbors.cljc","^I",34,"^O",["^K",[["^13","~$p__5426"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",35,"^S",["^4",["^Z","^[","^T","^10","^11"]],"^H",35,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^13",["~$x","~$y"]]]]]],"^M","Returns a vector of the indices for the neighborhood grid where neighbors\ncould be found."],"~$get-potential-neighbors",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/src/pucks/neighbors.cljc","^F",44,"^G",7,"^H",44,"^I",30,"^J",["^K",["^L",["^K",[["~$grid","~$a"]]]]],"^M","Gets the potential neighbors of an agent."],"^5","~$pucks.neighbors/get-potential-neighbors","^E","src/pucks/neighbors.cljc","^I",30,"^O",["^K",[["^17","~$a"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",44,"^S","^T","^H",44,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^17","~$a"]]]]],"^M","Gets the potential neighbors of an agent."],"~$update-neighbors",["^ ","^C",null,"^D",["^ ","^E","/Users/jfong/pucks/src/pucks/neighbors.cljc","^F",55,"^G",7,"^H",55,"^I",23,"^J",["^K",["^L",["^K",[[]]]]],"^M","Annotates each agent in the simulation with :neighbors and :overlaps."],"^5","~$pucks.neighbors/update-neighbors","^E","src/pucks/neighbors.cljc","^I",23,"^O",["^K",[[]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",55,"^S","^T","^H",55,"^U",0,"^V",true,"^J",["^K",["^L",["^K",[[]]]]],"^M","Annotates each agent in the simulation with :neighbors and :overlaps."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:neighborhood-size","~:sensed","~:beacon","~:stone","~:nursery","~:screen-size","~:radius","~:overlaps","~:id","~:position","~:neighbors"]],"~:order",["^1I","^1@","^1F","^1D","^1?","^1H","^1B","^1A","^1C","^1G","^1E"]],"^M",null]